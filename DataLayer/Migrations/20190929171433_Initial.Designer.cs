// <auto-generated />
using System;
using DataLayer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataLayer.Migrations
{
    [DbContext(typeof(DbArchitecture))]
    [Migration("20190929171433_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DomainLayer.AddressType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("AddressTypes");
                });

            modelBuilder.Entity("DomainLayer.Application", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<string>("Name");

                    b.Property<int>("ThemeID");

                    b.HasKey("ID");

                    b.HasIndex("ThemeID");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("DomainLayer.ApplicationType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("ApplicationTypes");
                });

            modelBuilder.Entity("DomainLayer.Authorization", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("AuthorizationCode");

                    b.Property<int>("AuthorizationTypeID");

                    b.Property<string>("CardType");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Last4");

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<string>("Note");

                    b.Property<string>("Token");

                    b.HasKey("ID");

                    b.HasIndex("AuthorizationTypeID");

                    b.ToTable("Authorizations");
                });

            modelBuilder.Entity("DomainLayer.AuthorizationType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("AuthorizationTypes");
                });

            modelBuilder.Entity("DomainLayer.Blog", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("BlogStatusTypeID");

                    b.Property<string>("Content");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("ImageUrl");

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<DateTime?>("PublishDate");

                    b.Property<string>("Subheading");

                    b.Property<string>("Title");

                    b.Property<int>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("BlogStatusTypeID");

                    b.HasIndex("UserID");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("DomainLayer.BlogCategory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("BlogCategoryTypeID");

                    b.Property<int>("BlogID");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("ModifiedTime");

                    b.HasKey("ID");

                    b.HasIndex("BlogCategoryTypeID");

                    b.HasIndex("BlogID");

                    b.ToTable("BlogCategories");
                });

            modelBuilder.Entity("DomainLayer.BlogCategoryType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("BlogCategoryTypes");
                });

            modelBuilder.Entity("DomainLayer.BlogComment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("BlogCommentStatusTypeID");

                    b.Property<int>("BlogID");

                    b.Property<string>("Comment");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<int>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("BlogCommentStatusTypeID");

                    b.HasIndex("BlogID");

                    b.HasIndex("UserID");

                    b.ToTable("BlogComments");
                });

            modelBuilder.Entity("DomainLayer.BlogCommentReply", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("BlogCommentID");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<string>("Reply");

                    b.Property<int>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("BlogCommentID");

                    b.HasIndex("UserID");

                    b.ToTable("BlogCommentReplies");
                });

            modelBuilder.Entity("DomainLayer.BlogCommentStatusType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("BlogCommentStatusTypes");
                });

            modelBuilder.Entity("DomainLayer.BlogStatusType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("BlogStatusTypes");
                });

            modelBuilder.Entity("DomainLayer.CardType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("CardTypes");
                });

            modelBuilder.Entity("DomainLayer.CashEvent", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<decimal>("AmountChange");

                    b.Property<int>("CashEventTypeID");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<int?>("PaymentID");

                    b.Property<int?>("RefundID");

                    b.HasKey("ID");

                    b.HasIndex("CashEventTypeID");

                    b.HasIndex("PaymentID");

                    b.HasIndex("RefundID");

                    b.ToTable("CashEvents");
                });

            modelBuilder.Entity("DomainLayer.CashEventType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("CashEventTypes");
                });

            modelBuilder.Entity("DomainLayer.County", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("Counties");
                });

            modelBuilder.Entity("DomainLayer.Credit", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<decimal>("Amount");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<int>("OrderID");

                    b.Property<int?>("PaymentID");

                    b.Property<int>("VoidReasonTypeID");

                    b.HasKey("ID");

                    b.HasIndex("OrderID");

                    b.HasIndex("PaymentID");

                    b.HasIndex("VoidReasonTypeID");

                    b.ToTable("Credits");
                });

            modelBuilder.Entity("DomainLayer.Customer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("MiddleName");

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<string>("Password")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("DomainLayer.CustomerAddress", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("AddressTypeID");

                    b.Property<string>("City")
                        .IsRequired();

                    b.Property<int>("CountyID");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("International");

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<string>("PostalCode")
                        .IsRequired();

                    b.Property<bool>("Primary");

                    b.Property<string>("Secondary");

                    b.Property<int>("StateID");

                    b.Property<string>("Street")
                        .IsRequired();

                    b.Property<string>("Street2");

                    b.HasKey("ID");

                    b.HasIndex("AddressTypeID");

                    b.HasIndex("CountyID");

                    b.HasIndex("StateID");

                    b.ToTable("CustomerAddresses");
                });

            modelBuilder.Entity("DomainLayer.CustomerCard", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("CardTypeID");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<string>("First6")
                        .IsRequired();

                    b.Property<string>("FirstName");

                    b.Property<string>("Last4")
                        .IsRequired();

                    b.Property<string>("LastName");

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<string>("Token");

                    b.HasKey("ID");

                    b.HasIndex("CardTypeID");

                    b.ToTable("CustomerCards");
                });

            modelBuilder.Entity("DomainLayer.CustomerPhone", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("Default");

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<string>("PhoneNumber")
                        .IsRequired();

                    b.Property<int?>("PhoneTypeID");

                    b.HasKey("ID");

                    b.HasIndex("PhoneTypeID");

                    b.ToTable("CustomerPhones");
                });

            modelBuilder.Entity("DomainLayer.Discount", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<decimal?>("Amount");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<string>("Name");

                    b.Property<decimal>("Percentage");

                    b.HasKey("ID");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("DomainLayer.Item", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code");

                    b.Property<decimal?>("Cost");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("DefaultTaxRates");

                    b.Property<bool>("IsRevenue");

                    b.Property<string>("ItemDescription")
                        .IsRequired();

                    b.Property<string>("ItemName")
                        .IsRequired();

                    b.Property<int>("ItemTypeID");

                    b.Property<string>("LookupCode");

                    b.Property<int>("MerchantID");

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<decimal?>("Percentage");

                    b.Property<decimal?>("Price");

                    b.Property<int>("PriceTypeID");

                    b.Property<string>("Sku");

                    b.Property<int>("UnitTypeID");

                    b.HasKey("ID");

                    b.HasIndex("ItemTypeID");

                    b.HasIndex("MerchantID");

                    b.HasIndex("PriceTypeID");

                    b.HasIndex("UnitTypeID");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("DomainLayer.ItemCategory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("ItemCategoryTypeID");

                    b.Property<int>("ItemID");

                    b.Property<DateTime?>("ModifiedTime");

                    b.HasKey("ID");

                    b.HasIndex("ItemCategoryTypeID");

                    b.HasIndex("ItemID");

                    b.ToTable("ItemCategories");
                });

            modelBuilder.Entity("DomainLayer.ItemCategoryType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("ID");

                    b.ToTable("ItemCategoryTypes");
                });

            modelBuilder.Entity("DomainLayer.ItemImage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("ImageUrl");

                    b.Property<int>("ItemID");

                    b.Property<DateTime?>("ModifiedTime");

                    b.HasKey("ID");

                    b.HasIndex("ItemID");

                    b.ToTable("ItemImages");
                });

            modelBuilder.Entity("DomainLayer.ItemModifier", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("ItemModifierTypeID");

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<string>("Name");

                    b.Property<decimal>("Price");

                    b.HasKey("ID");

                    b.HasIndex("ItemModifierTypeID");

                    b.ToTable("ItemModifiers");
                });

            modelBuilder.Entity("DomainLayer.ItemModifierType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("DefaultModifier");

                    b.Property<int>("ItemID");

                    b.Property<int>("MaxAllowed");

                    b.Property<int>("MinRequired");

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("ID");

                    b.HasIndex("ItemID");

                    b.ToTable("ItemModifierTypes");
                });

            modelBuilder.Entity("DomainLayer.ItemStock", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("ItemID");

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<double>("Quantity");

                    b.HasKey("ID");

                    b.HasIndex("ItemID");

                    b.ToTable("ItemStock");
                });

            modelBuilder.Entity("DomainLayer.ItemTag", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("ItemID");

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<int>("TagID");

                    b.HasKey("ID");

                    b.HasIndex("ItemID");

                    b.HasIndex("TagID");

                    b.ToTable("ItemTags");
                });

            modelBuilder.Entity("DomainLayer.ItemType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("ItemTypes");
                });

            modelBuilder.Entity("DomainLayer.LineItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<decimal>("ItemAmount");

                    b.Property<int>("ItemID");

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<int>("OrderID");

                    b.HasKey("ID");

                    b.HasIndex("ItemID");

                    b.HasIndex("OrderID");

                    b.ToTable("LineItems");
                });

            modelBuilder.Entity("DomainLayer.Merchant", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsBillable");

                    b.Property<string>("MerchantName")
                        .IsRequired();

                    b.Property<int>("MerchantTypeID");

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<bool>("SelfBoardingApplication");

                    b.Property<string>("WebsiteUrl");

                    b.HasKey("ID");

                    b.HasIndex("MerchantTypeID");

                    b.ToTable("Merchants");
                });

            modelBuilder.Entity("DomainLayer.MerchantType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("MerchantTypes");
                });

            modelBuilder.Entity("DomainLayer.MerchantUser", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("MerchantID");

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<int>("RoleID");

                    b.Property<int>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("MerchantID");

                    b.HasIndex("RoleID");

                    b.HasIndex("UserID");

                    b.ToTable("MerchantUsers");
                });

            modelBuilder.Entity("DomainLayer.Order", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CustomerID");

                    b.Property<int>("MerchantID");

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<string>("Note");

                    b.Property<int>("OrderStatusTypeID");

                    b.Property<decimal>("Total");

                    b.Property<int?>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("MerchantID");

                    b.HasIndex("OrderStatusTypeID");

                    b.HasIndex("UserID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("DomainLayer.OrderStatusType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("OrderStatusTypes");
                });

            modelBuilder.Entity("DomainLayer.Payment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<decimal>("Amount");

                    b.Property<int?>("AuthorizationID");

                    b.Property<decimal?>("CashTendered");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<int>("OrderID");

                    b.Property<int>("PaymentStatusTypeID");

                    b.Property<int>("PaymentTypeID");

                    b.HasKey("ID");

                    b.HasIndex("AuthorizationID");

                    b.HasIndex("OrderID");

                    b.HasIndex("PaymentStatusTypeID");

                    b.HasIndex("PaymentTypeID");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("DomainLayer.PaymentStatusType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("PaymentStatusTypes");
                });

            modelBuilder.Entity("DomainLayer.PaymentType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("PaymentTypes");
                });

            modelBuilder.Entity("DomainLayer.Permission", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action");

                    b.Property<bool>("Active");

                    b.Property<string>("Controller");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("DomainLayer.PhoneType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("PhoneTypes");
                });

            modelBuilder.Entity("DomainLayer.PriceType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("PriceTypes");
                });

            modelBuilder.Entity("DomainLayer.Project", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<string>("ImageURL");

                    b.Property<int>("MerchantID");

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<string>("Name");

                    b.Property<int>("ProjectTypeID");

                    b.HasKey("ID");

                    b.HasIndex("MerchantID");

                    b.HasIndex("ProjectTypeID");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("DomainLayer.ProjectType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("ProjectTypes");
                });

            modelBuilder.Entity("DomainLayer.Refund", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<decimal>("Amount");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<int>("OrderID");

                    b.Property<int?>("PaymentID");

                    b.Property<int>("VoidReasonTypeID");

                    b.HasKey("ID");

                    b.HasIndex("OrderID");

                    b.HasIndex("PaymentID");

                    b.HasIndex("VoidReasonTypeID");

                    b.ToTable("Refunds");
                });

            modelBuilder.Entity("DomainLayer.Role", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("DomainLayer.RolePermission", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<int>("PermissionID");

                    b.Property<int>("RoleID");

                    b.HasKey("ID");

                    b.HasIndex("PermissionID");

                    b.HasIndex("RoleID");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("DomainLayer.State", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired();

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("States");
                });

            modelBuilder.Entity("DomainLayer.Tag", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("DomainLayer.Task", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("DomainLayer.TaskPriorityType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("TaskPriorityTypes");
                });

            modelBuilder.Entity("DomainLayer.TaskStatusType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("TaskStatusType");
                });

            modelBuilder.Entity("DomainLayer.TaskType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("TaskTypes");
                });

            modelBuilder.Entity("DomainLayer.TaxRate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDefault");

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<decimal>("Rate");

                    b.Property<decimal?>("TaxAmount");

                    b.Property<int>("TaxTypeID");

                    b.HasKey("ID");

                    b.HasIndex("TaxTypeID");

                    b.ToTable("TaxRates");
                });

            modelBuilder.Entity("DomainLayer.TaxType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("TaxTypes");
                });

            modelBuilder.Entity("DomainLayer.Team", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<string>("ImageURL");

                    b.Property<int>("MerchantID");

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<string>("Name");

                    b.Property<int>("TeamTypeID");

                    b.HasKey("ID");

                    b.HasIndex("MerchantID");

                    b.HasIndex("TeamTypeID");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("DomainLayer.TeamType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("TeamTypes");
                });

            modelBuilder.Entity("DomainLayer.Theme", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<string>("Name");

                    b.Property<string>("StyleSheetCDN");

                    b.HasKey("ID");

                    b.ToTable("Themes");
                });

            modelBuilder.Entity("DomainLayer.UnitType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("UnitTypes");
                });

            modelBuilder.Entity("DomainLayer.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("ImageUrl");

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("MiddleName");

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<string>("Username")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DomainLayer.VoidReasonType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("VoidReasonTypes");
                });

            modelBuilder.Entity("DomainLayer.Application", b =>
                {
                    b.HasOne("DomainLayer.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DomainLayer.Authorization", b =>
                {
                    b.HasOne("DomainLayer.AuthorizationType", "AuthorizationType")
                        .WithMany()
                        .HasForeignKey("AuthorizationTypeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DomainLayer.Blog", b =>
                {
                    b.HasOne("DomainLayer.BlogStatusType", "BlogStatusType")
                        .WithMany()
                        .HasForeignKey("BlogStatusTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DomainLayer.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DomainLayer.BlogCategory", b =>
                {
                    b.HasOne("DomainLayer.BlogCategoryType", "BlogCategoryType")
                        .WithMany()
                        .HasForeignKey("BlogCategoryTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DomainLayer.Blog", "Blog")
                        .WithMany()
                        .HasForeignKey("BlogID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DomainLayer.BlogComment", b =>
                {
                    b.HasOne("DomainLayer.BlogCommentStatusType", "BlogCommentStatusType")
                        .WithMany()
                        .HasForeignKey("BlogCommentStatusTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DomainLayer.Blog", "Blog")
                        .WithMany()
                        .HasForeignKey("BlogID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DomainLayer.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DomainLayer.BlogCommentReply", b =>
                {
                    b.HasOne("DomainLayer.BlogComment", "BlogComment")
                        .WithMany()
                        .HasForeignKey("BlogCommentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DomainLayer.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DomainLayer.CashEvent", b =>
                {
                    b.HasOne("DomainLayer.CashEventType", "CashEventType")
                        .WithMany()
                        .HasForeignKey("CashEventTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DomainLayer.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DomainLayer.Merchant", "Refund")
                        .WithMany()
                        .HasForeignKey("RefundID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DomainLayer.Credit", b =>
                {
                    b.HasOne("DomainLayer.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DomainLayer.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DomainLayer.VoidReasonType", "VoidReasonType")
                        .WithMany()
                        .HasForeignKey("VoidReasonTypeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DomainLayer.CustomerAddress", b =>
                {
                    b.HasOne("DomainLayer.AddressType", "AddressType")
                        .WithMany()
                        .HasForeignKey("AddressTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DomainLayer.County", "County")
                        .WithMany()
                        .HasForeignKey("CountyID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DomainLayer.State", "State")
                        .WithMany()
                        .HasForeignKey("StateID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DomainLayer.CustomerCard", b =>
                {
                    b.HasOne("DomainLayer.CardType", "CardType")
                        .WithMany()
                        .HasForeignKey("CardTypeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DomainLayer.CustomerPhone", b =>
                {
                    b.HasOne("DomainLayer.PhoneType", "PhoneType")
                        .WithMany()
                        .HasForeignKey("PhoneTypeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DomainLayer.Item", b =>
                {
                    b.HasOne("DomainLayer.ItemType", "ItemType")
                        .WithMany()
                        .HasForeignKey("ItemTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DomainLayer.Merchant", "Merchant")
                        .WithMany()
                        .HasForeignKey("MerchantID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DomainLayer.PriceType", "PriceType")
                        .WithMany()
                        .HasForeignKey("PriceTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DomainLayer.UnitType", "UnitType")
                        .WithMany()
                        .HasForeignKey("UnitTypeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DomainLayer.ItemCategory", b =>
                {
                    b.HasOne("DomainLayer.ItemCategoryType", "ItemCategoryType")
                        .WithMany()
                        .HasForeignKey("ItemCategoryTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DomainLayer.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DomainLayer.ItemImage", b =>
                {
                    b.HasOne("DomainLayer.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DomainLayer.ItemModifier", b =>
                {
                    b.HasOne("DomainLayer.ItemModifierType", "ItemModifierType")
                        .WithMany()
                        .HasForeignKey("ItemModifierTypeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DomainLayer.ItemModifierType", b =>
                {
                    b.HasOne("DomainLayer.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DomainLayer.ItemStock", b =>
                {
                    b.HasOne("DomainLayer.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DomainLayer.ItemTag", b =>
                {
                    b.HasOne("DomainLayer.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DomainLayer.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DomainLayer.LineItem", b =>
                {
                    b.HasOne("DomainLayer.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DomainLayer.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DomainLayer.Merchant", b =>
                {
                    b.HasOne("DomainLayer.MerchantType", "MerchantType")
                        .WithMany()
                        .HasForeignKey("MerchantTypeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DomainLayer.MerchantUser", b =>
                {
                    b.HasOne("DomainLayer.Merchant", "Merchant")
                        .WithMany()
                        .HasForeignKey("MerchantID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DomainLayer.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DomainLayer.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DomainLayer.Order", b =>
                {
                    b.HasOne("DomainLayer.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DomainLayer.Merchant", "Merchant")
                        .WithMany()
                        .HasForeignKey("MerchantID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DomainLayer.OrderStatusType", "OrderStatusType")
                        .WithMany()
                        .HasForeignKey("OrderStatusTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DomainLayer.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DomainLayer.Payment", b =>
                {
                    b.HasOne("DomainLayer.Authorization", "Authorization")
                        .WithMany()
                        .HasForeignKey("AuthorizationID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DomainLayer.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DomainLayer.PaymentStatusType", "PaymentStatusType")
                        .WithMany()
                        .HasForeignKey("PaymentStatusTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DomainLayer.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DomainLayer.Project", b =>
                {
                    b.HasOne("DomainLayer.Merchant", "Merchant")
                        .WithMany()
                        .HasForeignKey("MerchantID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DomainLayer.ProjectType", "ProjectType")
                        .WithMany()
                        .HasForeignKey("ProjectTypeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DomainLayer.Refund", b =>
                {
                    b.HasOne("DomainLayer.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DomainLayer.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DomainLayer.VoidReasonType", "VoidReasonType")
                        .WithMany()
                        .HasForeignKey("VoidReasonTypeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DomainLayer.RolePermission", b =>
                {
                    b.HasOne("DomainLayer.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DomainLayer.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DomainLayer.TaxRate", b =>
                {
                    b.HasOne("DomainLayer.TaxType", "TaxType")
                        .WithMany()
                        .HasForeignKey("TaxTypeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DomainLayer.Team", b =>
                {
                    b.HasOne("DomainLayer.Merchant", "Merchant")
                        .WithMany()
                        .HasForeignKey("MerchantID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DomainLayer.TeamType", "TeamType")
                        .WithMany()
                        .HasForeignKey("TeamTypeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
